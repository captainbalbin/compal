datasource db {
    provider = "sqlite"
    url      = "file:dev.db"
}

generator client {
    provider = "prisma-client-js"
}

model Price {
    id       Int      @id @default(autoincrement())
    price    Decimal
    currency String
    Switch   Switch[]
}

model Store {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    url      String    @unique
    img      String    @unique // path for either next js Image or exertnally hosted images (direct links to sites)
    products Product[]
}

model Category {
    id       Int       @id @default(autoincrement())
    type     String    @unique
    products Product[]
}

model Product {
    id             Int          @id @default(autoincrement())
    name           String
    Category       Category     @relation(fields: [categoryId], references: [id])
    categoryId     Int
    Manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id])
    manufacturerId Int
    stores         Store[]
    variations     Variation[]
}

model Manufacturer {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    url      String?   @unique
    products Product[]
}

model Variation {
    id         Int         @id @default(autoincrement())
    price      Float
    url        String      @unique
    Switch     Switch?
    Stabilizer Stabilizer?
    Spring     Spring?
    Keycap     Keycap?
    products   Product[]
}

model Switch {
    id          Int       @id @default(autoincrement())
    Weight      Weight[]
    Material    Material  @relation(fields: [materialId], references: [id])
    materialId  Int
    Variation   Variation @relation(fields: [variationId], references: [id])
    variationId Int       @unique
    Price       Price?    @relation(fields: [priceId], references: [id])
    priceId     Int?
}

model Stabilizer {
    id          Int       @id @default(autoincrement())
    Set         Set[]
    Color       Color[]
    Variation   Variation @relation(fields: [variationId], references: [id])
    variationId Int       @unique
}

model Spring {
    id          Int       @id @default(autoincrement())
    Weight      Weight[]
    Variation   Variation @relation(fields: [variationId], references: [id])
    variationId Int       @unique
}

model Keycap {
    id          Int       @id @default(autoincrement())
    Color       Color     @relation(fields: [colorId], references: [id])
    colorId     Int
    Variation   Variation @relation(fields: [variationId], references: [id])
    variationId Int       @unique
}

model Weight {
    id        Int      @id @default(autoincrement())
    actuation Float
    bottomOut Float
    Switch    Switch[]
    Spring    Spring[]

    @@unique([actuation, bottomOut])
}

model Material {
    id            Int      @id @default(autoincrement())
    stem          String
    topHousing    String
    bottomHousing String
    switches      Switch[]

    @@unique([stem, topHousing, bottomHousing])
}

model Color {
    id          Int          @id @default(autoincrement())
    value       String       @unique
    stabilizers Stabilizer[]
    keycaps     Keycap[]
}

model Set {
    id         Int          @id @default(autoincrement())
    type       String       @unique
    Stabilizer Stabilizer[]
}

model Layout {
    id    Int    @id @default(autoincrement())
    value String
}
